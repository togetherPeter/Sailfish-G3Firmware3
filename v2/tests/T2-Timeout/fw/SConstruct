#
# HOW TO USE THIS BUILD SCRIPT
#
# By default, this script will build the firmware for an atmega644p-based motherboard.
# The firmware will be built, but not uploaded.
#
# To build for another platform, pass an explicit platform parameter.  For example,
# $ scons platform=atmega168
# $ scons platform=atmega328p
#
# To upload the firmware, specify the "upload" target.  By default, this will use
# /dev/ttyUSB0 as the serial connection.
# $ scons upload
#
# If you want to select a port manually, specify it as a parameter:
# $ scons port=/dev/ttyUSB3 upload
#

import os
from os.path import dirname
# Parameters
src_dir = '../../../src'
platform = ARGUMENTS.get('platform','atmega644p')
f_cpu='16000000L'
build_dir = platform+'_build'

default_baud = '19200'
if (platform == 'atmega644p'):
	default_baud = '38400'

upload_port = ARGUMENTS.get('port','/dev/ttyUSB0')
upload_baud = ARGUMENTS.get('baud',default_baud)
upload_prog = ARGUMENTS.get('programmer','stk500v1')

flags=['-I', src_dir+'/platform/'+platform,
	'-I', src_dir,
	'-DF_CPU='+str(f_cpu),
	'-mmcu='+platform,
	'-g',
	'-Os',
	'-w',
	'-fno-exceptions',
	'-ffunction-sections',
	'-fdata-sections']

local_src_dir='src'
local_build_dir='local_'+build_dir

util_srcs = [build_dir+"/util/"+x for x in Split("Packet.cc DebugPacketProcessor.cc")]
platform_srcs = [build_dir+"/platform/"+platform+"/"+x for x in Split("UART.cc PSU.cc DebugPin.cc Timeout.cc")]
srcs = util_srcs + platform_srcs 

if (os.environ.has_key('AVR_TOOLS_PATH')):
	avr_tools_path = os.environ['AVR_TOOLS_PATH']
else:
	avr_tools_path = dirname(os.popen('/usr/bin/which avr-gcc').readlines()[0])

VariantDir(build_dir,src_dir)
VariantDir(local_build_dir,local_src_dir)
env=Environment(CC=avr_tools_path+"/avr-gcc",
	CXX=avr_tools_path+"/avr-g++",
	CCFLAGS=flags)
objs = env.Object([local_build_dir+'/T2-Timeout.cc', srcs])

# run_alias = Alias('run', [program], program[0].path)
# AlwaysBuild(run_alias)

hex_file = local_build_dir+'/T1-UART.hex'
env.Append(BUILDERS={'Elf':Builder(action=avr_tools_path+"/avr-gcc -mmcu="+platform+" -Os -Wl,--gc-sections -o $TARGET $SOURCES")})
env.Append(BUILDERS={'Hex':Builder(action=avr_tools_path+"/avr-objcopy -O ihex -R .eeprom $SOURCES $TARGET")})
env.Elf(local_build_dir+'/T1-UART.elf', objs) 
env.Hex(hex_file, local_build_dir+'/T1-UART.elf')

avrdude = avr_tools_path+"/avrdude"
avrdude_flags = "-V -F -p "+platform.replace("atmega","m")
avrdude_flags = avrdude_flags + " -P "+upload_port
avrdude_flags = avrdude_flags + " -c "+upload_prog
avrdude_flags = avrdude_flags + " -b "+upload_baud
avrdude_command = " ".join([avrdude,avrdude_flags,"-U","flash:w:"+hex_file])

upload_alias = Alias('upload', hex_file, avrdude_command)
AlwaysBuild(upload_alias)
